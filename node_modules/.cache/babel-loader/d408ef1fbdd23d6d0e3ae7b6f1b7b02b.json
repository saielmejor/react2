{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAIKEN\\\\Downloads\\\\react2-main\\\\react2-main\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AddUser from './component/Users/AddUserName';\nimport UsersList from './component/Users/UsersList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [usersList, setUsersList] = useState([]);\n\n  const addUserHandler = (uName, uAge) => {\n    setUsersList(prevUsersList => {\n      return [...prevUsersList, {\n        name: uName,\n        age: uAge,\n        id: Math.random().toString()\n      }]; // creates an unique id because each child needs an unique key \n      //  use the spread operator to obtain the previousList \n    }); // gets the old list and append the new users \n  }; // creates state usersList \n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddUser, {\n      onAddUser: addUserHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(UsersList, {\n      users: usersList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"NgkqpNlTMjx6ze734YwQkD1z0Jo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/SAIKEN/Downloads/react2-main/react2-main/src/App.js"],"names":["React","useState","AddUser","UsersList","App","usersList","setUsersList","addUserHandler","uName","uAge","prevUsersList","name","age","id","Math","random","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAWC,YAAX,IAAyBL,QAAQ,CAAC,EAAD,CAAvC;;AAEA,QAAMM,cAAc,GAAE,CAACC,KAAD,EAAOC,IAAP,KAAe;AACnCH,IAAAA,YAAY,CAAEI,aAAD,IAAmB;AAC9B,aAAO,CAAC,GAAGA,aAAJ,EAAkB;AAACC,QAAAA,IAAI,EAACH,KAAN;AAAcI,QAAAA,GAAG,EAACH,IAAlB;AAAwBI,QAAAA,EAAE,EAACC,IAAI,CAACC,MAAL,GAAcC,QAAd;AAA3B,OAAlB,CAAP,CAD8B,CAE9B;AACA;AACD,KAJW,CAAZ,CADmC,CAK/B;AACL,GAND,CAHa,CAUb;;;AACA,sBACE;AAAA,4BACJ,QAAC,OAAD;AAAS,MAAA,SAAS,EAAET;AAApB;AAAA;AAAA;AAAA;AAAA,YADI,eAEJ,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEF;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFI;AAAA,kBADF;AAOD;;GAlBQD,G;;KAAAA,G;AAoBT,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react'; \nimport AddUser from './component/Users/AddUserName';\nimport UsersList from './component/Users/UsersList';\n\nfunction App() {\n  const [usersList,setUsersList]=useState([]); \n\n  const addUserHandler= (uName,uAge)=> { \n    setUsersList((prevUsersList) => {\n      return [...prevUsersList,{name:uName , age:uAge ,id:Math.random().toString()}]  \n      // creates an unique id because each child needs an unique key \n      //  use the spread operator to obtain the previousList \n    }); // gets the old list and append the new users \n  };\n  // creates state usersList \n  return (\n    <>\n<AddUser onAddUser={addUserHandler}/> \n<UsersList users={usersList} />\n{/* you need to pass down users props array because in userList component they are asking for users.props */}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}